#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

# if [ -z "${POSTGRES_USER}" ]; then
#     base_postgres_image_default_user='postgres'
#     export POSTGRES_USER="${base_postgres_image_default_user}"
# fi
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

echo '--->database url<---'
echo ${DATABASE_URL}

postgres_ready() {
python << END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}
until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL main to become available...'
  >&2 echo ${DATABASE_URL}
  sleep 1
done
>&2 echo 'PostgreSQL main is available'





# export ADMIN_DATABASE_URL="postgres://${POSTGRES_ADMIN_USER}:${POSTGRES_ADMIN_PASSWORD}@${POSTGRES_ADMIN_HOST}:${POSTGRES_ADMIN_PORT}/${POSTGRES_ADMIN_DB}"



# postgres_unfold_ready() {
# python << END
# import sys

# import psycopg2

# try:
#     psycopg2.connect(
#         dbname="${POSTGRES_ADMIN_DB}",
#         user="${POSTGRES_ADMIN_USER}",
#         password="${POSTGRES_ADMIN_PASSWORD}",
#         host="${POSTGRES_ADMIN_HOST}",
#         port="${POSTGRES_ADMIN_PORT}",
#     )
# except psycopg2.OperationalError:
#     sys.exit(-1)
# sys.exit(0)

# END
# }

# echo '--->database url<---'
# echo ${ADMIN_DATABASE_URL}


# until postgres_unfold_ready; do
#   >&2 echo 'Waiting for PostgreSQL unfold to become available...'
#   sleep 1
# done
# >&2 echo 'PostgreSQL unfold is available'



# Add pg_trgm extension
echo 'Enabling pg_trgm extension...'
psql "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}" <<-EOSQL
CREATE EXTENSION IF NOT EXISTS pg_trgm;
EOSQL
echo 'pg_trgm extension enabled.'


exec "$@"
